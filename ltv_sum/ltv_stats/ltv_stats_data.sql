------TRAINING TABLE FOR STATISTICAL MODEL
DROP TABLE IF EXISTS ACCOUNTING.DBT_LOCAL.LTV_STATS_INPUT;
CREATE table ACCOUNTING.DBT_LOCAL.LTV_STATS_INPUT AS
WITH
USER AS
(
    SELECT
    USER_ID,
    STARTDATE,
    PLATFORM,
    ATTRIBUTION,
    NETWORK
    FROM DBT.DEV_YANCHUN_PUBLIC.LTV_USER_2022
    WHERE startdate < DATEADD('month', -9, DATE_TRUNC('month', CURRENT_DATE()))
    ---- users arrive 9 months ago as the training users
),
USER_TRANS AS
(
    SELECT
    USER.USER_ID AS USER_ID,
    TRANS_TIME,
    TRANS_ID,
    REVENUE
    FROM USER
    LEFT JOIN ACCOUNTING.DBT_LOCAL.USER_TRANSACTION_2022 TRANS
    ON USER.USER_ID = TRANS.USER_ID
    WHERE TRANS_TIME IS NOT NULL AND to_date(TRANS_TIME) < DATEADD('month', -6, DATE_TRUNC('month', CURRENT_DATE()))
),
USER_FEATURES AS
(
    SELECT
    USER_ID,
    DATE(MIN(TRANS_TIME)) AS FIRST_TRANS,
    COUNT(TRANS_ID) - 1 AS FREQUENCY,
    DATEDIFF('day', DATE(MIN(TRANS_TIME)), DATEADD('month', -6, DATE_TRUNC('month', CURRENT_DATE()))) AS T,
    DATEDIFF('day', DATE(MIN(TRANS_TIME)), date(MAX(TRANS_TIME))) AS RECENCY,
    AVG(REVENUE) AS MONETARY,
    SUM(REVENUE) AS TOTALREVENUE
    FROM USER_TRANS
    GROUP BY USER_ID
),
USERS_REAL AS
(
    SELECT
    USER.USER_ID AS USER_ID,
    USER.STARTDATE AS STARTDATE,
    PLATFORM,
    ATTRIBUTION,
    NETWORK,
    COUNT(TRANS_ID) AS REAL_TRANS_NUM,
    SUM(REVENUE) AS REAL_REVENUE
    FROM  USER
    LEFT JOIN ACCOUNTING.DBT_LOCAL.USER_TRANSACTION_2022 TRANS
    ON USER.USER_ID = TRANS.USER_ID
    WHERE TRANS_TIME IS NOT NULL AND to_date(TRANS_TIME) >= DATEADD('month', -6, DATE_TRUNC('month', CURRENT_DATE()))
    AND to_date(TRANS_TIME) < DATE_TRUNC('month', CURRENT_DATE())
    GROUP BY 1, 2, 3, 4, 5
    ---SIX MONTH REVENUE
),
TRAINING AS
(
    SELECT
    FEAT.USER_ID AS USER_ID,
    FEAT.FIRST_TRANS AS FIRST_TRANS,
    FEAT.FREQUENCY AS FREQUENCY,
    FEAT.T AS T,
    FEAT.RECENCY AS RECENCY,
    FEAT.MONETARY AS MONETARY,
    FEAT.TOTALREVENUE AS TOTALREVENUE,
    RE.REAL_TRANS_NUM AS REAL_TRANS_NUM,
    RE.REAL_REVENUE AS REAL_REVENUE,
    RE.STARTDATE AS STARTDATE,
    RE.PLATFORM AS PLATFORM,
    RE.ATTRIBUTION AS ATTRIBUTION,
    RE.NETWORK AS NETWORK,
    DATEADD('month', -6, DATE_TRUNC('month', CURRENT_DATE())) AS FORECASTDATE
    FROM USER_FEATURES FEAT
    LEFT JOIN USERS_REAL RE
    ON FEAT.USER_ID = RE.USER_ID
),
USER_FORECAST AS
(
    SELECT
    USER_ID,
    STARTDATE,
    PLATFORM,
    ATTRIBUTION,
    NETWORK
    FROM DBT.DEV_YANCHUN_PUBLIC.LTV_USER_2022
    WHERE startdate < DATEADD('month', -3, DATE_TRUNC('month', CURRENT_DATE()))
    ---- users arrive 9 months ago as the training users
),
USER_TRANS_FORECAST AS
(
    SELECT
    USER_FORECAST.USER_ID AS USER_ID,
    TRANS_TIME,
    TRANS_ID,
    REVENUE
    FROM USER_FORECAST
    LEFT JOIN ACCOUNTING.DBT_LOCAL.USER_TRANSACTION_2022 TRANS
    ON USER_FORECAST.USER_ID = TRANS.USER_ID
    WHERE TRANS_TIME IS NOT NULL AND DATE(TRANS_TIME) < DATE_TRUNC('month', CURRENT_DATE())
),
USER_FEATURE_FORECAST AS
(
    SELECT
    USER_ID,
    DATE(MIN(TRANS_TIME)) AS FIRST_TRANS,
    COUNT(TRANS_ID) - 1 AS FREQUENCY,
    DATEDIFF('day', DATE(MIN(TRANS_TIME)), MAX(DATE_TRUNC('month', CURRENT_DATE()))) AS T,
    DATEDIFF('day', DATE(MIN(TRANS_TIME)), DATE(MAX(TRANS_TIME))) AS RECENCY,
    AVG(REVENUE) AS MONETARY,
    SUM(REVENUE) AS TOTALREVENUE
    FROM USER_TRANS_FORECAST
    GROUP BY USER_ID
),
FORECAST_DATA AS
(
    SELECT
    FORE.USER_ID AS USER_ID,
    FORE.FIRST_TRANS AS FIRST_TRANS,
    FORE.FREQUENCY AS FREQUENCY,
    FORE.T AS T,
    FORE.RECENCY AS RECENCY,
    FORE.MONETARY AS MONETARY,
    FORE.TOTALREVENUE AS TOTALREVENUE,
    0 AS REAL_TRANS_NUM,
    0 AS REAL_REVENUE,
    UF.STARTDATE AS STARTDATE,
    UF.PLATFORM AS PLATFORM,
    UF.ATTRIBUTION AS ATTRIBUTION,
    UF.NETWORK AS NETWORK,
    DATE_TRUNC('month', CURRENT_DATE()) AS FORECASTDATE
    FROM USER_FEATURE_FORECAST FORE
    LEFT JOIN USER_FORECAST UF
    ON FORE.USER_ID = UF.USER_ID
)
SELECT * FROM TRAINING
UNION
SELECT * FROM FORECAST_DATA;